#!/bin/bash

if [ "$1" = "rpm" ]; then
    # Build tarball and source package
    export PACKAGE="com.pojtinger.felicitas.hydrapp.example-0.0.1"
    export SUFFIX="1.fc34"
    export SPEC="com.pojtinger.felicitas.hydrapp.example.spec"

    dnf install -y fedora-packager @development-tools qemu-user-static rpm-sign

    rpmdev-setuptree

    export TARBALL="${HOME}/rpmbuild/SOURCES/${PACKAGE}.tar.gz"
    export DSC="${HOME}/rpmbuild/SRPMS/${PACKAGE}-${SUFFIX}.src.rpm"

    tar -cvzf "${TARBALL}" --exclude out --transform "s,^,${PACKAGE}/," .
    rpmbuild -bs "${SPEC}"

    rpmlint "${DSC}"

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    echo "%_signature gpg
%_gpg_name ${GPG_KEY_ID}" >~/.rpmmacros

    # Build chroot
    declare -A TARGETS
    export TARGETS=(["epel-8"]="x86_64" ["fedora-34"]="x86_64" ["opensuse-tumbleweed"]="x86_64")

    for DIST in "${!TARGETS[@]}"; do
        # Build binary package
        for ARCH in ${TARGETS[$DIST]}; do
            mock -r "${DIST}-${ARCH}" "${DSC}" --enable-network

            rpmlint /var/lib/mock/"${DIST}-${ARCH}"/result/*.rpm

            mkdir -p "out/repositories/${DIST}"
            \cp /var/lib/mock/"${DIST}-${ARCH}"/result/*.rpm "out/repositories/${DIST}"

            rpm --addsign out/repositories/"${DIST}"/*.rpm

            createrepo "out/repositories/${DIST}"

            gpg --detach-sign --armor "out/repositories/${DIST}/repodata/repomd.xml"

            gpg --output "out/repositories/${DIST}/repodata/repo.asc" --armor --export

            # Add repo file
            echo "[hydrapp-repo]
name=Hydrapp YUM repo
baseurl=https://pojntfx.github.io/hydrapp/yum/${DIST}
enabled=1
gpgcheck=1
gpgkey=https://pojntfx.github.io/hydrapp/yum/${DIST}/repodata/repo.asc" >"out/repositories/${DIST}/repodata/hydrapp.repo"
        done
    done
elif [ "$1" = "flatpak" ]; then
    # Install native dependencies
    apt update
    apt install -y flatpak-builder xz-utils

    # Install Flatpak dependencies
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo

    # Build targets
    declare -A TARGETS
    export TARGETS=(["linux"]="x86_64")

    HOST_ARCH="$(uname -m)"
    export HOST_ARCH

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    gpg --output /tmp/public.gpg --armor --export

    for DIST in "${!TARGETS[@]}"; do
        # Build binary package
        for ARCH in ${TARGETS[$DIST]}; do
            # Install pre-build SDKs
            # No need to quote; the word splitting is intentional
            flatpak install $([ "${ARCH}" = "${HOST_ARCH}" ] || echo --arch="${ARCH}") -y flathub org.freedesktop.Platform//21.08 org.freedesktop.Sdk//21.08 org.freedesktop.Sdk.Extension.golang//21.08

            mkdir -p out/repositories

            # Build SDK and export to repo
            # No need to quote; the word splitting is intentional
            flatpak-builder $([ "${ARCH}" = "${HOST_ARCH}" ] || echo --arch="${ARCH}") --gpg-sign="${GPG_KEY_ID}" --repo=out/repositories --user --install --force-clean build-dir org.freedesktop.Sdk.Extension.ImageMagick.yaml

            # Build app and export to repo
            # No need to quote; the word splitting is intentional
            flatpak-builder $([ "${ARCH}" = "${HOST_ARCH}" ] || echo --arch="${ARCH}") --gpg-sign="${GPG_KEY_ID}" --repo=out/repositories --force-clean build-dir com.pojtinger.felicitas.hydrapp.example.yaml

            # Add repo file
            echo "[Flatpak Repo]
Title=Hydrapp Flatpak repo
Url=https://pojntfx.github.io/hydrapp/flatpak/
Homepage=https://github.com/pojntfx/hydrapp/
Description=Flatpaks for Hydrapp
GPGKey=$(base64 -w 0 /tmp/public.gpg)
" >out/repositories/hydrapp.flatpakrepo

            # Export `.flatpak` to `out` dir
            # No need to quote; the word splitting is intentional
            flatpak $([ "${ARCH}" = "${HOST_ARCH}" ] || echo --arch="${ARCH}") --gpg-sign="${GPG_KEY_ID}" build-bundle out/repositories "out/com.pojtinger.felicitas.hydrapp.example.${DIST}-${ARCH}.flatpak" com.pojtinger.felicitas.hydrapp.example
        done
    done
elif [ "$1" = "apk" ]; then
    # Install native dependencies
    apt update
    apt install -y curl unzip default-jdk make zip

    # Install the Android SDK and NDK
    export ANDROID_BUILD_TOOLS_VERSION=31.0.0
    export ANDROID_API_VERSION=30

    curl -L -o /tmp/commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
    rm -rf /tmp/cmdline-tools
    unzip -d /tmp/ /tmp/commandlinetools.zip

    rm -rf ~/Android/Sdk
    mkdir -p ~/Android/Sdk
    yes | /tmp/cmdline-tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "cmdline-tools;latest" "platform-tools" "platforms;android-${ANDROID_API_VERSION}" "ndk-bundle" --sdk_root=$HOME/Android/Sdk

    echo 'export ANDROID_HOME=$HOME/Android/Sdk' >>~/.bashrc
    echo 'export ANDROID_SDK_ROOT=$HOME/Android/Sdk' >>~/.bashrc
    echo 'export ANDROID_NDK_ROOT=$HOME/Android/Sdk/ndk-bundle' >>~/.bashrc
    echo 'export PATH=$PATH:$ANDROID_HOME/platform-tools' >>~/.bashrc

    source ~/.bashrc

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    # Install the legacy Android NDK
    export ANDROID_LEGACY_HOME="${ANDROID_HOME}/ndk/android-ndk-r10e"
    curl -L -o /tmp/sdk-legacy.zip https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip
    rm -rf "${ANDROID_LEGACY_HOME}"
    unzip -d "${ANDROID_HOME}/ndk" /tmp/sdk-legacy.zip

    # Build app
    export APP_ID=com.pojtinger.felicitas.hydrapp.example
    export ANDROID_NDK_VERSION=30
    export ANDROID_LEGACY_API_VERSION=8
    export ANDROID_LEGACY_NDK_VERSION=16

    mkdir -p out
    bash -O extglob -c 'cd out && rm -rf -- !(*.jar)'
    mkdir -p out/drawable
    CGO_ENABLED=1 GOOS=android GOARCH=386 CC="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android${ANDROID_NDK_VERSION}-clang" CXX="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android${ANDROID_NDK_VERSION}-clang++" go build -buildmode=c-shared -o=out/lib/x86/libbackend.so
    CGO_ENABLED=1 GOOS=android GOARCH=amd64 CC="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android${ANDROID_NDK_VERSION}-clang" CXX="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android${ANDROID_NDK_VERSION}-clang++" go build -buildmode=c-shared -o=out/lib/x86_64/libbackend.so
    CGO_ENABLED=1 GOOS=android GOARCH=arm GOARM=5 CGO_LDFLAGS="--sysroot ${ANDROID_LEGACY_HOME}/platforms/android-${ANDROID_LEGACY_API_VERSION}/arch-arm" CGO_CFLAGS="--sysroot ${ANDROID_LEGACY_HOME}/platforms/android-${ANDROID_LEGACY_API_VERSION}/arch-arm" CC="${ANDROID_LEGACY_HOME}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-gcc" CXX="${ANDROID_LEGACY_HOME}/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64/bin/arm-linux-androideabi-g++" go build -tags "netgo,androiddnsfix,tlscertembed" -buildmode=c-shared -o=out/lib/armeabi/libbackend_compat.so
    CGO_ENABLED=1 GOOS=android GOARCH=arm GOARM=5 CC="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_LEGACY_NDK_VERSION}-clang" CXX="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_LEGACY_NDK_VERSION}-clang++" go build -tags "netgo,androiddnsfix,tlscertembed" -buildmode=c-shared -o=out/lib/armeabi-v7a/libbackend_compat.so
    CGO_ENABLED=1 GOOS=android GOARCH=arm CC="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_API_VERSION}-clang" CXX="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi${ANDROID_API_VERSION}-clang++" go build -buildmode=c-shared -o=out/lib/armeabi-v7a/libbackend.so
    CGO_ENABLED=1 GOOS=android GOARCH=arm64 CC="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_NDK_VERSION}-clang" CXX="${ANDROID_HOME}/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${ANDROID_NDK_VERSION}-clang++" go build -buildmode=c-shared -o=out/lib/arm64-v8a/libbackend.so
    gpg --detach-sign --armor out/lib/*/*
    cd out || exit 1
    cp ../*.java ../AndroidManifest.xml .
    cp ../icon.png drawable
    javac -source 1.8 -target 1.8 -cp *.jar -cp "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/core-lambda-stubs.jar -bootclasspath "${ANDROID_HOME}"/platforms/android-${ANDROID_API_VERSION}/android.jar *.java
    "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/d8 *.class --release
    "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aapt2 compile drawable/icon.png -o .
    "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aapt2 link -o ${APP_ID}.unsigned -I "${ANDROID_HOME}"/platforms/android-${ANDROID_API_VERSION}/android.jar *.flat --manifest AndroidManifest.xml
    zip -ur ${APP_ID}.unsigned lib classes.dex
    mkdir -p ../.android-certs # Append *.jar here to use an external library
    # Append -I *.jar here to use an external library
    echo "${ANDROID_CERT}" | base64 -d >../.android-certs/${APP_ID}.keystore
    "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/zipalign -f -p 4 ${APP_ID}.unsigned ${APP_ID}.apk
    "${ANDROID_HOME}"/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/apksigner sign --ks ../.android-certs/${APP_ID}.keystore --ks-pass pass:"${ANDROID_CERT_PASSWORD}" --key-pass pass:"${ANDROID_CERT_PASSWORD}" ${APP_ID}.apk

    gpg --detach-sign --armor "${APP_ID}.apk"

    # Setup repository
    apt install -y fdroidserver

    mkdir -p repositories
    cd repositories || exit 1

    fdroid init
    cat >config.yml <<EOT
---
sdk_path: "${ANDROID_HOME}"
repo_url: https://hydrapp-example-fdroid.loca.lt
repo_name: Hydrapp F-Droid Repo
repo_description: >-
  Android apps for Hydrapp.
repo_icon: icon.png
repo_keyalias: fb88a1d2c9ed
keystore: "${APP_ID}"
keystorepass: $(echo "${ANDROID_CERT_PASSWORD}" | base64)
keypass: $(echo "${ANDROID_CERT_PASSWORD}" | base64)
keydname: CN=fb88a1d2c9ed, OU=F-Droid
apksigner: /usr/bin/apksigner
EOT

    cp ${APP_ID} repo/

    fdroid update --create-metadata
    fdroid gpgsign

elif [ "$1" = "msi" ]; then
    # Install native dependencies
    apt update
    apt install -y wixl make imagemagick

    # Build app
    mkdir -p out
    convert -resize x16 -gravity center -crop 16x16+0+0 -flatten -colors 256 -background transparent icon.png out/icon.ico

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    declare -A TARGETS
    export TARGETS=(["windows"]="386 amd64 arm arm64")

    for DIST in "${!TARGETS[@]}"; do
        for ARCH in ${TARGETS[$DIST]}; do
            export GOOS="$DIST"
            export GOARCH="$ARCH"

            go build -o "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.exe" .
            gpg --detach-sign --armor "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.exe"

            wixl -o "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.msi" <(sed "s@Source=\"com.pojtinger.felicitas.hydrapp.example.exe\"@Source=\"out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.exe\"@g" com.pojtinger.felicitas.hydrapp.example.wxl | sed 's@SourceFile="icon.ico"@SourceFile="out/icon.ico"@g' | sed 's@Source="icon.ico"@Source="out/icon.ico"@g')
            gpg --detach-sign --armor "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.msi"
        done
    done
elif [ "$1" = "dmg" ]; then
    # Install native dependencies
    apt update
    apt install -y genisoimage make imagemagick

    # Build app
    mkdir -p out
    convert icon.png out/icon.icns

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    declare -A TARGETS
    export TARGETS=(["darwin"]="amd64 arm64")

    for DIST in "${!TARGETS[@]}"; do
        for ARCH in ${TARGETS[$DIST]}; do
            export GOOS="$DIST"
            export GOARCH="$ARCH"

            go build -o "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}" .
            gpg --detach-sign --armor "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}"

            cp Info.plist out/

            mkdir -p "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt/Hydrapp Example.app/Contents/"{MacOS,Resources}
            cp "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}" "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt/Hydrapp Example.app/Contents/MacOS/com.pojtinger.felicitas.hydrapp.example"
            cp "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.asc" "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt/Hydrapp Example.app/Contents/MacOS/com.pojtinger.felicitas.hydrapp.example.asc"
            cp out/Info.plist "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt/Hydrapp Example.app/Contents"
            cp out/icon.icns "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt/Hydrapp Example.app/Contents/Resources"

            genisoimage -V "Install Hydrapp Example" -D -R -apple -no-pad -o "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg" "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt"
            gpg --detach-sign --armor "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg"

            rm -rf "out/com.pojtinger.felicitas.hydrapp.example.${GOOS}-${GOARCH}.dmg.mnt"
        done
    done
elif [ "$1" = "deb" ]; then
    # Build tarball and source package
    export PACKAGE="com.pojtinger.felicitas.hydrapp.example_0.0.1"

    apt update
    apt install -y dpkg-dev apt-utils ubuntu-keyring debian-ports-archive-keyring

    dpkg-source -b .

    # Build chroot and binary package
    apt update
    apt install -y pbuilder qemu-user-static

    cat <<EOT >~/.pbuilderrc
#!/bin/bash

set -e

NAME="\${OS}-\${DIST}-\${ARCH}"
mkdir -p "/var/cache/pbuilder/\${NAME}/"{aptcache,result}

if [ "\${ARCH}" != "\$(dpkg --print-architecture)" ]; then
    DEBOOTSTRAP="qemu-debootstrap"
fi

PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends-apt"
USENETWORK="yes"
DEBOOTSTRAPOPTS=("\${DEBOOTSTRAPOPTS}" "--arch=\${ARCH}")
BASETGZ="/var/cache/pbuilder/\${NAME}-base.tgz"
DISTRIBUTION="\$DIST"
BUILDRESULT="/var/cache/pbuilder/\${NAME}/result/"
APTCACHE="/var/cache/pbuilder/\${NAME}/aptcache/"
BUILDPLACE="/var/cache/pbuilder/build"
HOOKDIR="/var/cache/pbuilder/hook.d/"
EOT

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    declare -A TARGETS
    export TARGETS=(
        ["debian|sid|http://ftp.ports.debian.org/debian-ports|main|--keyring=/usr/share/keyrings/debian-ports-archive-keyring.gpg"]="riscv64"
        ["debian|bullseye|http://http.us.debian.org/debian|main contrib|"]="amd64" # i386 armel armhf arm64 ppc64el are also available
        ["debian|sid|http://http.us.debian.org/debian|main contrib|"]="amd64"      # i386 armel armhf arm64 ppc64el are also available
        ["ubuntu|focal|http://archive.ubuntu.com/ubuntu|main restricted universe multiverse|"]="amd64"
        ["ubuntu|focal|http://ports.ubuntu.com/ubuntu-ports|main restricted universe multiverse|"]="arm64" # armhf ppc64el are also available; riscv64 is disabled due to buggy Go builds
    )                                                                                                      # MIPS and s390x are not supported due to buggy Go builds and TLS cert validation issues

    for TARGET in "${!TARGETS[@]}"; do
        OS="$(cut -d'|' -f1 <<<"${TARGET}")"
        DIST="$(cut -d'|' -f2 <<<"${TARGET}")"
        MIRRORSITE="$(cut -d'|' -f3 <<<"${TARGET}")"
        COMPONENTS="$(cut -d'|' -f4 <<<"${TARGET}")"
        DEBOOTSTRAPOPTS="$(cut -d'|' -f5 <<<"${TARGET}")"

        export OS
        export DIST
        export MIRRORSITE
        export COMPONENTS
        export DEBOOTSTRAPOPTS

        for ARCH in ${TARGETS[$TARGET]}; do
            export ARCH

            # Word splitting is intentional here
            pbuilder --create --mirror "${MIRRORSITE}" --components "${COMPONENTS}" $([ "${DEBOOTSTRAPOPTS}" != "" ] && echo --debootstrapopts "${DEBOOTSTRAPOPTS}")

            # Word splitting is intentional here
            pbuilder build --mirror "${MIRRORSITE}" --components "${COMPONENTS}" $([ "${DEBOOTSTRAPOPTS}" != "" ] && echo --debootstrapopts "${DEBOOTSTRAPOPTS}") "../${PACKAGE}.dsc"

            for FILE in "/var/cache/pbuilder/${OS}-${DIST}-${ARCH}/result/"*; do
                mv "${FILE}" "${FILE//_${ARCH}/_${OS}_${DIST}_${ARCH}}" || :
            done

            mkdir -p "out/repositories/${OS}/pool/main"
            cp "/var/cache/pbuilder/${OS}-${DIST}-${ARCH}/result/"* "out/repositories/${OS}/pool/main" || :
        done

        cd out/repositories || exit 1

        for ARCH in ${TARGETS[$TARGET]}; do
            mkdir -p "${OS}/dists/${DIST}/main/binary-${ARCH}"
        done

        mkdir -p "${OS}/dists/${DIST}/main/source"
        mkdir -p cache

        cat >apt-ftparchive.conf <<EOT
Dir {
	ArchiveDir "./${OS}";
	CacheDir "./cache";
};
Default {
	Packages::Compress ". gzip bzip2";
	Sources::Compress ". gzip bzip2";
	Contents::Compress ". gzip bzip2";
};
TreeDefault {
	BinCacheDB "packages-\$(SECTION)-\$(ARCH).db";
	Directory "pool/\$(SECTION)";
	Packages "\$(DIST)/\$(SECTION)/binary-\$(ARCH)/Packages";
	SrcDirectory "pool/\$(SECTION)";
	Sources "\$(DIST)/\$(SECTION)/source/Sources";
	Contents "\$(DIST)/Contents-\$(ARCH)";
};
Tree "dists/${DIST}" {
	Sections "main";
	Architectures "${TARGETS[$TARGET]} source";
}
EOT

        apt-ftparchive generate apt-ftparchive.conf

        cat >"${OS}-${DIST}.conf" <<EOT
APT::FTPArchive::Release::Codename "${DIST}";
APT::FTPArchive::Release::Origin "Hydrapp APT repo";
APT::FTPArchive::Release::Components "main";
APT::FTPArchive::Release::Label "Packages for Hydrapp";
APT::FTPArchive::Release::Architectures "${TARGETS[$TARGET]} source";
APT::FTPArchive::Release::Suite "${DIST}";
EOT

        apt-ftparchive -c "${OS}-${DIST}.conf" release "${OS}/dists/${DIST}" >"${OS}/dists/${DIST}/Release"

        gpg --output "repo.asc" --armor --export

        gpg --output "${OS}/dists/${DIST}/Release.gpg" -ba "${OS}/dists/${DIST}/Release"

        cd ../..
    done
else
    # Install native dependencies
    apt update
    apt install -y curl make

    # Install bagop
    curl -L -o /tmp/bagop "https://github.com/pojntfx/bagop/releases/latest/download/bagop.linux-$(uname -m)"
    install /tmp/bagop /usr/local/bin

    # Prepare GPG
    echo "${GPG_KEY_PASSWORD}" | base64 -d >/tmp/gpg-pass
    mkdir -p ~/.gnupg
    cat >~/.gnupg/gpg.conf <<EOT
yes
passphrase-file /tmp/gpg-pass
pinentry-mode loopback
EOT

    echo "${GPG_KEY}" | base64 -d >/tmp/private.gpg
    gpg --import /tmp/private.gpg

    # Install dependencies
    CGO_ENABLED=0 bagop -j "$(nproc)" -b com.pojtinger.felicitas.hydrapp.example -x '(android/*|ios/*|js/wasm|aix/ppc64|plan9/*)' -p 'make DST=$DST'

    for FILE in out/*; do
        gpg --detach-sign --armor "${FILE}"
    done
fi
