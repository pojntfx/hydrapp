#!/bin/bash

if [ "$1" = "rpm" ]; then
    # Build tarball and source package
    export PACKAGE="com.pojtinger.flatpakintegratedwebserver-0.0.1"
    export SUFFIX="1.fc34"
    export SPEC="com.pojtinger.flatpakintegratedwebserver.spec"

    dnf install -y fedora-packager @development-tools qemu-user-static

    rpmdev-setuptree

    export TARBALL="${HOME}/rpmbuild/SOURCES/${PACKAGE}.tar.gz"
    export DSC="${HOME}/rpmbuild/SRPMS/${PACKAGE}-${SUFFIX}.src.rpm"

    tar -cvzf "${TARBALL}" --exclude out --transform "s,^,${PACKAGE}/," .
    rpmbuild -bs "${SPEC}"

    rpmlint "${DSC}"

    mkdir -p out
    cp "${TARBALL}" "${DSC}" out || exit 1

    # Build chroot
    declare -A TARGETS
    export TARGETS=(["epel-8"]="x86_64" ["fedora-34"]="x86_64" ["opensuse-tumbleweed"]="x86_64")

    for DIST in "${!TARGETS[@]}"; do
        # Build binary package
        for ARCH in ${TARGETS[$DIST]}; do
            mock -r "${DIST}-${ARCH}" "${DSC}" --enable-network

            rm /var/lib/mock/"${DIST}-${ARCH}"/result/*.src.rpm
            rpmlint /var/lib/mock/"${DIST}-${ARCH}"/result/*.rpm

            cp /var/lib/mock/"${DIST}-${ARCH}"/result/*.rpm out || exit 1
            mv out/*.src.rpm "out/${PACKAGE}.src.rpm" || exit 1
        done
    done
elif [ "$1" = "flatpak" ]; then
    # Install native dependencies
    apt update
    apt install -y flatpak-builder xz-utils

    # Install Flatpak dependencies
    flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
    flatpak install -y flathub org.freedesktop.Platform//21.08 org.freedesktop.Sdk//21.08 org.freedesktop.Sdk.Extension.golang//21.08

    # Build SDK
    flatpak-builder --repo=repo --user --install --force-clean build-dir org.freedesktop.Sdk.Extension.ImageMagick.yaml

    # Build app
    flatpak-builder --repo=repo --user --install --force-clean build-dir com.pojtinger.flatpakintegratedwebserver.yaml

    # Export `.flatpak` to `out` dir
    mkdir -p out
    flatpak build-bundle repo out/com.pojtinger.flatpakintegratedwebserver.flatpak com.pojtinger.flatpakintegratedwebserver
elif [ "$1" = "android" ]; then
    # Install native dependencies
    apt update
    apt install -y curl unzip default-jdk make zip

    # Install the Android SDK and NDK
    export ANDROID_BUILD_TOOLS_VERSION=31.0.0
    export ANDROID_API_VERSION=30

    curl -L -o /tmp/commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
    rm -rf /tmp/cmdline-tools
    unzip -d /tmp/ /tmp/commandlinetools.zip

    rm -rf ~/Android/Sdk
    mkdir -p ~/Android/Sdk
    yes | /tmp/cmdline-tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" "cmdline-tools;latest" "platform-tools" "platforms;android-${ANDROID_API_VERSION}" "ndk-bundle" --sdk_root=$HOME/Android/Sdk

    echo 'export ANDROID_HOME=$HOME/Android/Sdk' >>~/.bashrc
    echo 'export ANDROID_SDK_ROOT=$HOME/Android/Sdk' >>~/.bashrc
    echo 'export ANDROID_NDK_ROOT=$HOME/Android/Sdk/ndk-bundle' >>~/.bashrc
    echo 'export PATH=$PATH:$ANDROID_HOME/platform-tools' >>~/.bashrc

    source ~/.bashrc

    # Install the legacy Android NDK
    export ANDROID_LEGACY_HOME="${ANDROID_HOME}/ndk/android-ndk-r10e"
    curl -L -o /tmp/sdk-legacy.zip https://dl.google.com/android/repository/android-ndk-r10e-linux-x86_64.zip
    rm -rf "${ANDROID_LEGACY_HOME}"
    unzip -d "${ANDROID_HOME}/ndk" /tmp/sdk-legacy.zip

    # Build app
    export APP_ID=com.pojtinger.flatpakintegratedwebserver
    export CERT_PASSWORD=123456
    export ANDROID_NDK_VERSION=30
    export ANDROID_LEGACY_API_VERSION=8
    export ANDROID_LEGACY_NDK_VERSION=16

    make build-android
else
    # Build tarball and source package
    export PACKAGE="com.pojtinger.flatpakintegratedwebserver_0.0.1"

    apt update
    apt install -y dpkg-dev

    dpkg-source -b .

    mkdir -p out
    cp "../${PACKAGE}.dsc" "../${PACKAGE}.tar.xz" out || exit 1

    # Build chroot
    export DSC="out/${PACKAGE}.dsc"
    declare -A TARGETS
    export TARGETS=(["bullseye|http://http.us.debian.org/debian"]="amd64 i386 armel armhf arm64 mips64el mipsel ppc64el s390x")

    apt update
    apt install -y pbuilder

    for DIST_MIRROR in "${!TARGETS[@]}"; do
        DIST="$(cut -d'|' -f1 <<<"${DIST_MIRROR}")"
        export DIST
        MIRROR="$(cut -d'|' -f2 <<<"${DIST_MIRROR}")"
        export MIRROR

        mkdir -p "/var/cache/pbuilder/${DIST}"/{aptcache,result}
        cat <<EOT >~/.pbuilderrc
PBUILDERSATISFYDEPENDSCMD="/usr/lib/pbuilder/pbuilder-satisfydepends-apt"
USENETWORK=yes

if [ -n "\${DIST}" ]; then
    BASETGZ="\$(dirname \${BASETGZ})/\${DIST}-base.tgz"
    DISTRIBUTION="\${DIST}"
    BUILDRESULT="/var/cache/pbuilder/\${DIST}/result/"
    APTCACHE="/var/cache/pbuilder/\${DIST}/aptcache/"
fi
EOT

        pbuilder create --mirror "${MIRROR}"

        # Build binary package
        for ARCH in ${TARGETS[$DIST_MIRROR]}; do
            pbuilder build --host-arch "${ARCH}" "${DSC}"

            for FILE in {"${ARCH}.deb","${ARCH}.buildinfo","${ARCH}.changes","source.changes"}; do
                cp "/var/cache/pbuilder/${DIST}/result/${PACKAGE}_${FILE}" "out/${DIST}.${PACKAGE}_${FILE}" || exit 1
            done
        done
    done
fi
